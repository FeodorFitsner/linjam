/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

// NOTE: arrange that "windows.h" be included before "JuceHeader.h" in all contexts
//         and arrange to include "JuceHeader.h" before any "*Component.h"
#include "LinJam.h" // includes "windows.h" and "JuceHeader.h"

#include "Constants.h"
#include "MainComponent.h"
#include "Trace.h"


//==============================================================================
class LinJamApplication  : public JUCEApplication , public NJClient , MultiTimer
{
public:
    //==============================================================================
    LinJamApplication() {}

    const String getApplicationName() override       { return ProjectInfo::projectName ; }
    const String getApplicationVersion() override    { return ProjectInfo::versionString ; }
    bool moreThanOneInstanceAllowed() override       { return false ; }

    //==============================================================================
    void initialise (const String& args) override
    {
      this->mainWindow         = new MainWindow() ;
      this->contentComponent   = (MainContentComponent*)this->mainWindow      ->findChildWithID(GUI::CONTENT_GUI_ID) ;
      this->loginComponent     = (LoginComponent*)      this->contentComponent->findChildWithID(GUI::LOGIN_GUI_ID) ;
      this->licenseComponent   = (LicenseComponent*)    this->contentComponent->findChildWithID(GUI::LICENSE_GUI_ID) ;
      this->chatComponent      = (ChatComponent*)       this->contentComponent->findChildWithID(GUI::CHAT_GUI_ID) ;
      this->statusbarComponent = (StatusBarComponent*)  this->contentComponent->findChildWithID(GUI::STATUS_GUI_ID) ;

      if (!LinJam::Initialize(this , contentComponent , args)) initError() ;

      this->prev_status = NJClient::NJC_STATUS_PRECONNECT ;
      this->startTimer(CLIENT::CLIENT_DRIVER_ID , CLIENT::CLIENT_DRIVER_IVL) ;
      this->startTimer(CLIENT::STATUS_POLL_ID ,   CLIENT::STATUS_POLL_IVL) ;
    }

    void initError()
    {
      this->statusbarComponent->setStatusL(GUI::AUDIO_INIT_ERROR_MSG.text) ;
    } // TODO: MB , prompt cfg ??

    void shutdown() override
    {
        // Add your application's shutdown code here..

        LinJam::Shutdown() ;
        this->mainWindow = nullptr ; // (deletes our window)
    }

    //==============================================================================
    void systemRequestedQuit() override
    {
        // This is called when the app is being asked to quit: you can ignore this
        // request and let the app carry on running, or call quit() to allow the app to close.
        this->quit() ;
    }

    void anotherInstanceStarted (const String& commandLine) override
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
        // the other instance's command-line arguments were.
    }

    //==============================================================================
    /*
        This class implements the desktop window that contains an instance of
        our MainContentComponent class.
    */
    class MainWindow    : public DocumentWindow
    {
    public:
        MainWindow()  : DocumentWindow (JUCEApplication::getInstance()->getApplicationName() ,
                                        Colours::lightgrey ,
                                        DocumentWindow::allButtons)
        {
            MainContentComponent* mainContentComponent = new MainContentComponent() ;
            setContentOwned(mainContentComponent , true) ;
            mainContentComponent->setComponentID(GUI::CONTENT_GUI_ID.text) ;
            centreWithSize(getWidth() , getHeight()) ;
            setVisible(true) ;
        }

        void closeButtonPressed()
        {
            // This is called when the user tries to close this window. Here, we'll just
            // ask the app to quit when this happens, but you can change this to do
            // whatever you need.
            JUCEApplication::getInstance()->systemRequestedQuit() ;
        }

        /* Note: Be careful if you override any DocumentWindow methods - the base
           class uses a lot of them, so by overriding you might break its functionality.
           It's best to do all your work in your content component instead, but if
           you really have to override any DocumentWindow methods, make sure your
           subclass also calls the superclass's method.
        */

    private:
        JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MainWindow)
    };

    void timerCallback(int timerId) override
    {
      int status = this->GetStatus() ;
      switch (timerId)
      {
        case CLIENT::CLIENT_DRIVER_ID: if (status >= 0) while (this->Run() && false) ; break ;
        case CLIENT::STATUS_POLL_ID:   this->handleStatus(status) ;           break ;
        default:                                                              break ;
      }
    }

    void handleStatus(int status)
    {
      if (status != this->prev_status) this->prev_status = status ; else return ;

DEBUG_TRACE_CONNECT_STATUS

      // GUI state
      switch (status)
      {
        case NJC_STATUS_DISCONNECTED: this->loginComponent  ->toFront(true) ; break ;
        case NJC_STATUS_INVALIDAUTH:  (LinJam::IsAgreed)?
                                      this->loginComponent  ->toFront(true) :
                                      this->licenseComponent->toFront(true) ; break ;
        case NJC_STATUS_CANTCONNECT:  this->loginComponent  ->toFront(true) ; break ;
        case NJC_STATUS_OK:           this->chatComponent   ->toFront(true) ; break ;
        case NJC_STATUS_PRECONNECT:   this->loginComponent  ->toFront(true) ; break ;
        default:                                                              break ;
      }

      // status indicator
      String status_text ;
      String disconnectedText  = GUI::DISCONNECTED_STATUS_TEXT ;
      String invalidAuthText   = (LinJam::IsAgreed)?
                                 GUI::INVALID_AUTH_STATUS_TEXT :
                                 GUI::PENDING_LICENSE_STATUS_TEXT ;
      String cantConnectText   = GUI::FAILED_CONNECTION_STATUS_TEXT ;
      String okText            = (status != NJC_STATUS_OK)? "" :
                                 GUI::CONNECTED_STATUS_TEXT + String(this->GetHostName()) ;
      String preConnectedText  = GUI::IDLE_STATUS_TEXT ;
      String unknownStatusText = GUI::UNKNOWN_STATUS_TEXT + String(status) ;
      switch (status)
      {
        case NJC_STATUS_DISCONNECTED: status_text = disconnectedText ;  break ;
        case NJC_STATUS_INVALIDAUTH:  status_text = invalidAuthText ;   break ;
        case NJC_STATUS_CANTCONNECT:  status_text = cantConnectText ;   break ;
        case NJC_STATUS_OK:           status_text = okText ;            break ;
        case NJC_STATUS_PRECONNECT:   status_text = preConnectedText ;  break ;
        default:                      status_text = unknownStatusText ; break ;
      }
      this->statusbarComponent->setStatusL(status_text) ;
    }

private:
    ScopedPointer<MainWindow> mainWindow ;
    MainContentComponent*     contentComponent ;
    LoginComponent*           loginComponent ;
    LicenseComponent*         licenseComponent ;
    ChatComponent*            chatComponent ;
    StatusBarComponent*       statusbarComponent ;

    int prev_status ;
};

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (LinJamApplication)
