/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

//#define DEBUG_AUTOJOIN_STATIC_CHANNEL
#define DEBUG_STATIC_CHANNEL "ninbot.com:2049"


// NOTE: arrange that "windows.h" be included before "JuceHeader.h" in all contexts
//         and arrange to include "JuceHeader.h" before any "*Component.h"
#include "LinJam.h" // includes "windows.h" and "JuceHeader.h"

#include "Constants.h"
#include "MainComponent.h"
#include "Trace.h"


//==============================================================================
class LinJamApplication : public JUCEApplication , public NJClient , MultiTimer
{
public:
    //==============================================================================
    LinJamApplication() {}

    const String getApplicationName() override       { return ProjectInfo::projectName ; }
    const String getApplicationVersion() override    { return ProjectInfo::versionString ; }
    bool moreThanOneInstanceAllowed() override       { return false ; }

    //==============================================================================
    void initialise (const String& commandLine) override
    {
      this->mainWindow         = new MainWindow() ;
      this->contentComponent   = (MainContentComponent*)getContainerComponent(GUI::CONTENT_GUI_ID) ;
      this->blankComponent     = (BlankComponent*)      getChildComponent(GUI::BLANK_GUI_ID) ;
      this->loginComponent     = (LoginComponent*)      getChildComponent(GUI::LOGIN_GUI_ID) ;
      this->licenseComponent   = (LicenseComponent*)    getChildComponent(GUI::LICENSE_GUI_ID) ;
      this->chatComponent      = (ChatComponent*)       getChildComponent(GUI::CHAT_GUI_ID) ;
      this->mixerComponent     = (MixerComponent*)      getChildComponent(GUI::MIXER_GUI_ID) ;
      this->statusbarComponent = (StatusBarComponent*)  getChildComponent(GUI::STATUS_GUI_ID) ;

      this->args = commandLine ; initializeLinJam() ;
    }

    void initializeLinJam()
    {
      if (!LinJam::Initialize(this , contentComponent , this->args))
      {
        this->statusbarComponent->setStatusL(GUI::AUDIO_INIT_ERROR_MSG) ;
        shutdown() ; this->quit() ; // TODO: MB , prompt cfg ?? (issue #12)
      }
      else
      {
          this->prev_status = NJClient::NJC_STATUS_DISCONNECTED ;
          this->startTimer(CLIENT::CLIENT_DRIVER_ID , CLIENT::CLIENT_DRIVER_IVL) ;
          this->startTimer(CLIENT::GUI_DRIVER_ID ,    CLIENT::GUI_DRIVER_IVL) ;
      }
    }

    Component* getContainerComponent(String id)
    { return this->mainWindow->findChildWithID(StringRef(id)) ; }

    Component* getChildComponent(String id)
    { return this->contentComponent->findChildWithID(StringRef(id)) ; }

    void shutdown() override
    {
        // Add your application's shutdown code here..

        LinJam::Shutdown() ;
        this->mainWindow = nullptr ; // (deletes our window)

DEBUG_TRACE_SHUTDOWN
    }

    //==============================================================================
    void systemRequestedQuit() override
    {
        // This is called when the app is being asked to quit: you can ignore this
        // request and let the app carry on running, or call quit() to allow the app to close.
        this->quit() ;
    }

    void anotherInstanceStarted (const String& commandLine) override
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
        // the other instance's command-line arguments were.
    }

    //==============================================================================
    /*
        This class implements the desktop window that contains an instance of
        our MainContentComponent class.
    */
    class MainWindow : public DocumentWindow
    {
    public:
        MainWindow() : DocumentWindow (JUCEApplication::getInstance()->getApplicationName() ,
                                       Colour (0xff202020) ,
                                       DocumentWindow::allButtons)
        {
            mainContentComponent = new MainContentComponent() ;
            setContentOwned(mainContentComponent , true) ;
            mainContentComponent->setComponentID(GUI::CONTENT_GUI_ID) ;
            centreWithSize(getWidth() , getHeight()) ;
            setVisible(true) ;
        }

        ~MainWindow()
        {
          this->mainContentComponent = nullptr ;
        }

        void closeButtonPressed()
        {
            // This is called when the user tries to close this window. Here, we'll just
            // ask the app to quit when this happens, but you can change this to do
            // whatever you need.
            JUCEApplication::getInstance()->systemRequestedQuit() ;
        }

        /* Note: Be careful if you override any DocumentWindow methods - the base
           class uses a lot of them, so by overriding you might break its functionality.
           It's best to do all your work in your content component instead, but if
           you really have to override any DocumentWindow methods, make sure your
           subclass also calls the superclass's method.
        */

    private:
        JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MainWindow)

        ScopedPointer<MainContentComponent> mainContentComponent ;
    };

    void timerCallback(int timerId) override
    {
#if EXIT_IMMEDIAYELY
DBG("[DEBUG]: EXIT_IMMEDIAYELY defined - bailing") ; this->quit() ;
#endif // EXIT_IMMEDIAYELY

      switch (timerId)
      {
        case CLIENT::CLIENT_DRIVER_ID: driveClient() ; break ;
        case CLIENT::GUI_DRIVER_ID:    updateGUI() ;   break ;
        default:                                       break ;
      }
    }

    void driveClient()
    {
      int status = GetStatus() ;
      if (status != this->prev_status) handleStatus(this->prev_status = status) ;
      if (status < NJC_STATUS_OK || !this->Run()) return ;

//      while (this->Run()) ;
      if (status == NJC_STATUS_OK && HasUserInfoChanged()) ;//handleUserInfoChanged() ;// TODO: this fires repeatedly
    }

    void handleStatus(int status)
    {
DEBUG_TRACE_CONNECT_STATUS
#ifdef DEBUG_AUTOJOIN_STATIC_CHANNEL
if (status == NJC_STATUS_PRECONNECT)
{ LinJam::Config->currentHost        = DEBUG_STATIC_CHANNEL ;
  LinJam::Config->currentLogin       =  "nobody" ;
  LinJam::Config->currentIsAnonymous = true ; LinJam::Connect() ; }
#endif // DEBUG_AUTOJOIN_STATIC_CHANNEL

      // GUI state
      this->blankComponent->toFront(false) ;
      switch (status)
      {
        case NJC_STATUS_DISCONNECTED: this->loginComponent  ->toFront(true)  ; break ;
        case NJC_STATUS_INVALIDAUTH:  (LinJam::IsAgreed())?
                                      this->loginComponent  ->toFront(true)  :
                                      this->licenseComponent->toFront(true)  ; break ;
        case NJC_STATUS_CANTCONNECT:  this->loginComponent  ->toFront(true)  ; break ;
        case NJC_STATUS_OK:           this->chatComponent   ->toFront(true)  ;
                                      this->mixerComponent  ->toFront(false) ; break ;
        case NJC_STATUS_PRECONNECT:   this->loginComponent  ->toFront(true)  ; break ;
        default:                                                               break ;
      }

      // status indicator
      String status_text ;
#ifdef WIN32 // TODO: GetHostName() linux .so segfault (issue #15)
      String host = GetHostName() ;
#else // WIN32
      String host = "host" ;
#endif // WIN32
      switch (status)
      {
        case NJC_STATUS_DISCONNECTED:
          status_text = GUI::DISCONNECTED_STATUS_TEXT ;              break ;
        case NJC_STATUS_INVALIDAUTH:
          status_text = (LinJam::IsAgreed())? ((isRoomFull())?
                        GUI::ROOM_FULL_STATUS_TEXT :
                        GUI::INVALID_AUTH_STATUS_TEXT) :
                        GUI::PENDING_LICENSE_STATUS_TEXT ;           break ;
        case NJC_STATUS_CANTCONNECT:
          status_text = GUI::FAILED_CONNECTION_STATUS_TEXT ;         break ;
        case NJC_STATUS_OK:
          status_text = GUI::CONNECTED_STATUS_TEXT + host ;          break ;
        case NJC_STATUS_PRECONNECT:
          status_text = GUI::IDLE_STATUS_TEXT ;                      break ;
        default:
          status_text = GUI::UNKNOWN_STATUS_TEXT + String(status) ;  break ;
      }
      this->statusbarComponent->setStatusL(status_text) ;
    }

    void updateGUI()
    {
      float master_vu = VAL2DB(GetOutputPeak()) ;
      mixerComponent->updateChannelVU(GUI::MASTER_MIXERGROUP_IDENTIFIER ,
                                      STORAGE::MASTER_KEY , master_vu) ;
    }

    void handleUserInfoChanged()
    {
DEBUG_TRACE_CHANNELS
    }


private:

    ScopedPointer<MainWindow> mainWindow ;
    MainContentComponent*     contentComponent ;
    BlankComponent*           blankComponent ;
    LoginComponent*           loginComponent ;
    LicenseComponent*         licenseComponent ;
    ChatComponent*            chatComponent ;
    MixerComponent*           mixerComponent ;
    StatusBarComponent*       statusbarComponent ;

    String args ;
    int    prev_status ;


    bool isRoomFull()
    {
#ifdef WIN32 // TODO: GetErrorStr() linux .so segfault (issue #15)
      String err = String(CharPointer_UTF8(GetErrorStr())) ;
      return (err.isNotEmpty() && !err.compare(CLIENT::SERVER_FULL_STATUS)) ;
#else // WIN32
      return true ;
/*
      if (GetErrorStr()[0]) // <-- segfault here
        return (!strcmp(GetErrorStr() , "room full")) ;
      else
        return false ;
*/
#endif
    }
} ;

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (LinJamApplication)
